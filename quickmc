#!/bin/bash
# QuickMC
# A fast setup, version management and startup script for minecraft servers.
# Simply download and invoke the script in the folder where you want your server.
# You can then invoke it to set up and run the server.
# If you want to change version at any point, invoke the script followed by "config".
# Enjoy!

# NOTE: Requires node.js or python3 to be installed to use their JSON parsers.

if [ -x "$(command -v node)" ]; then
    QMC_NODE=true
elif ! [ -x "$(command -v python3)" ]; then
    echo "quickMC requires either node.js or python3 to run, since it requires a JSON parser. Please install one of the two and try again."
    exit 1
fi

if [ -f quickmc.properties ]; then
    source quickmc.properties
fi

if ! [ -f quickmc.properties ] | [ $1 = "config"]; then
    # Initial setup
    DEFAULT_JAVA_PATH="/usr/lib/jvm/jdk-21-oracle-x64/bin/java"
    if ! [ -z JVM_PATH ]; then DEFAULT_JAVA_PATH=$JVM_PATH; fi

    curl -s "https://launchermeta.mojang.com/mc/game/version_manifest.json" > mc_version_manifest.json
    echo "Thanks for using quickMC. Let's get you set up!"
    echo "Input the version of minecraft you want your server to run on (leave blank to use latest):"
    while : ; do
        read SERVER_VER
        if [ "$SERVER_VER" = "" ]; then
            SERVER_VER=$(grep -oP "(?<=\"latest\": {\"release\": \").*?(?=\")" mc_version_manifest.json)
        fi
        json=$(< mc_version_manifest.json)
        if [[ $json =~ "\"id\": \"$SERVER_VER\"" ]]; then
            break
        fi
        echo "It seems that version of minecraft does not exist, please try again."
    done
    echo "Version has been set to $SERVER_VER."
    echo "Please enter the command/path for your JVM executable. Ensure it is the right one for your version!"
    echo "Leave blank for the default directory ($DEFAULT_JAVA_PATH)"
    read JVM_PATH
    if [ "$JVM_PATH" = "" ]; then
        JVM_PATH="$DEFAULT_JAVA_PATH"
    fi
    echo "Choose how many GB of ram to allocate to the server:"
    while : ; do
        read JVM_GB
        if [[ $JVM_GB =~ ^[1-9]\d*$ ]] ; then
            break
        fi
        echo "Invalid amount, please enter a positive integer."
    done

    echo "SERVER_VER=\"$SERVER_VER\"
JVM_PATH=\"$JVM_PATH\"
JVM_GB=\"$JVM_GB\"
    " > quickmc.properties

    echo "You're all set up! Configuration has been saved."
else

JAR_PATH="server-$SERVER_VER.jar"
(( JVM_M = JVM_GB * 1024 ))
JAVA_COMMAND="$JVM_PATH -Xms${JVM_M}M -Xmx${JVM_M}M -jar $JAR_PATH nogui"

if ! [ -f $JAR_PATH ]; then
    echo "[quickMC] $JAR_PATH not found, downloading"
    if ! [ -f mc_version_manifest.json ]; then
        curl -s "https://launchermeta.mojang.com/mc/game/version_manifest.json" > mc_version_manifest.json
    fi
    if [ "$QMC_NODE" = true ]; then
         VERSION_ASSETS_URL=$(node -e "console.log(require('./mc_version_manifest.json').versions.find(v => v.id == '$SERVER_VER').url)")
    else
         VERSION_ASSETS_URL=$(python3 -c "import json;
with open('mc_version_manifest.json') as file:
    manifest = json.load(file)
    print([v for v in manifest['versions'] if v['id'] == '$SERVER_VER'][0]['url'])")
    fi
    curl -s $VERSION_ASSETS_URL > mc_version_assets.json
    if [ "$QMC_NODE" = true ]; then
        JAR_URL=$(node -e "console.log(require('./mc_version_assets.json').downloads?.server?.url || '')")
    else
        JAR_URL=$(python3 -c "import json;
with open('mc_version_assets.json') as file:
    assets = json.load(file)
    print(assets['downloads']['server']['url'])")
    fi
    if ! [[ "$JAR_URL" =~ \.jar$ ]]; then
       echo "[quickMC] Could not retrieve download for the server jar, the selected minecraft version may not have a server download. Change or delete quickmc.properties, then try again."
       echo $JAR_URL
       exit 1
    fi
    curl $JAR_URL > $JAR_PATH

    rm mc_version_manifest.json mc_version_assets.json
fi

# Auto-agree to eula
echo "eula=true" > eula.txt

echo "[quickMC] Starting server..."

$JAVA_COMMAND